// Copyright 2025 QMK
// SPDX-License-Identifier: GPL-2.0-or-later

// This was file generated on 2025-05-12 01:44:15.
// Do not edit this file directly!

#pragma once

#define SEQUENCE_TRANSFORM_GENERATOR_VERSION_3_2

#define TRIECODE_SEQUENCE_TOKEN_0 0x0080
#define TRIECODE_SEQUENCE_METACHAR_0 0x00A0
#define TRIECODE_SEQUENCE_REF_TOKEN_0 0x0080
#define SEQUENCE_MIN_LENGTH 2 // "zl"
#define SEQUENCE_MAX_LENGTH 8 // "theyre'‚éµ"
#define TRANSFORM_MAX_LENGTH 8 // "they're‚éµ"
#define COMPLETION_MAX_LENGTH 4
#define MAX_BACKSPACES 2
#define SEQUENCE_TRIE_SIZE 643
#define COMPLETIONS_SIZE 34
#define SEQUENCE_TOKEN_COUNT 4
#define SEQUENCE_METACHAR_COUNT 8
#define SEQUENCE_REF_TOKEN_COUNT 8

static const char st_seq_token_ascii_chars[] = { '*', '@', '#', '&' };
#ifdef ST_TESTER
static const char *st_seq_tokens[] = { "üëÜ", "üëà", "‚òÖ", "üëç" };
static const char *st_seq_metachars[] = { "‚àÜ", "‚àá", "‚àÇ", "‚Äº", "‚Ä•", "‚Ä¢", "‚Ä∏", "‚àÄ" };
static const char *st_trans_seq_ref_tokens[] = { "‚óØ", "‚ë¥", "‚ëµ", "‚ë∂", "‚ë∑", "‚ë∏", "‚ëπ", "‚ë∫" };
static const char *st_space_token = "‚éµ";
#endif

// Sequence Transformation dictionary with longest match semantics
// Dictionary (57 entries):
//    zl       -> zil
//    zn       -> zin
//    zg       -> zig
//    zm       -> zim
//    pz       -> ps
//    zp       -> sp
//    mz       -> my
//    tz       -> ty
//    zt       -> yt
//    qe       -> que
//    qa       -> qua
//    qi       -> qui
//    qo       -> quo
//    zzl      -> zzl
//    pfz      -> phy
//    zzp      -> zp
//    xey      -> key
//    exx      -> exp
//    axx      -> axp
//    oxx      -> oxp
//    ixx      -> ixp
//    uxx      -> uxp
//    quu      -> qu
//    qaa      -> qa
//    qee      -> qe
//    qii      -> qi
//    qoo      -> qo
//    qqe      -> quee
//    exxz     -> exx
//    axxz     -> axx
//    ixxz     -> ixx
//    uxxz     -> uxx
//    oxxz     -> oxx
//    wont‚éµ    -> won't‚éµ
//    cant‚éµ    -> can't‚éµ
//    dont‚éµ    -> don't‚éµ
//    Wont‚éµ    -> Won't‚éµ
//    Cant‚éµ    -> Can't‚éµ
//    Dont‚éµ    -> Don't‚éµ
//    didnt‚éµ   -> didn't‚éµ
//    youre‚éµ   -> you're‚éµ
//    Didnt‚éµ   -> Didn't‚éµ
//    Youre‚éµ   -> You're‚éµ
//    wont'‚éµ   -> wont‚éµ
//    cant'‚éµ   -> cant‚éµ
//    dont'‚éµ   -> dont‚éµ
//    Wont'‚éµ   -> Wont‚éµ
//    Cant'‚éµ   -> Cant‚éµ
//    Dont'‚éµ   -> Dont‚éµ
//    theyre‚éµ  -> they're‚éµ
//    Theyre‚éµ  -> They're‚éµ
//    didnt'‚éµ  -> didnt‚éµ
//    youre'‚éµ  -> youre‚éµ
//    Didnt'‚éµ  -> Didnt‚éµ
//    Youre'‚éµ  -> Youre‚éµ
//    theyre'‚éµ -> theyre‚éµ
//    Theyre'‚éµ -> Theyre‚éµ

static const uint8_t sequence_transform_trie[SEQUENCE_TRIE_SIZE] PROGMEM = {
    0x40, 0x20, 0x00, 0x3B, 0x61, 0x01, 0x68, 0x65, 0x01, 0x77, 0x67, 0x01, 0x8E, 0x69, 0x01, 0x96,
    0x6C, 0x01, 0xA5, 0x6D, 0x01, 0xB5, 0x6E, 0x01, 0xBD, 0x6F, 0x01, 0xC5, 0x70, 0x01, 0xD4, 0x74,
    0x01, 0xE4, 0x75, 0x01, 0xEC, 0x78, 0x01, 0xF5, 0x79, 0x02, 0x22, 0x7A, 0x02, 0x2B, 0x80, 0x02,
    0x6F, 0x81, 0x02, 0x74, 0x82, 0x02, 0x79, 0x83, 0x02, 0x7E, 0x00, 0x40, 0x27, 0x00, 0x46, 0x65,
    0x00, 0xDB, 0x74, 0x01, 0x11, 0x00, 0x40, 0x65, 0x00, 0x4E, 0x74, 0x00, 0x84, 0x00, 0x01, 0x72,
    0x00, 0x40, 0x75, 0x00, 0x59, 0x79, 0x00, 0x6E, 0x00, 0x01, 0x6F, 0x00, 0x40, 0x59, 0x00, 0x64,
    0x79, 0x00, 0x69, 0x00, 0xA0, 0x01, 0x01, 0x00, 0x03, 0xA0, 0x01, 0x01, 0x00, 0x03, 0x01, 0x65,
    0x68, 0x00, 0x40, 0x54, 0x00, 0x7A, 0x74, 0x00, 0x7F, 0x00, 0xA0, 0x01, 0x01, 0x00, 0x03, 0xA0,
    0x01, 0x01, 0x00, 0x03, 0x01, 0x6E, 0x00, 0x40, 0x61, 0x00, 0x92, 0x64, 0x00, 0xA4, 0x6F, 0x00,
    0xB9, 0x00, 0x40, 0x43, 0x00, 0x9A, 0x63, 0x00, 0x9F, 0x00, 0xA0, 0x01, 0x01, 0x00, 0x03, 0xA0,
    0x01, 0x01, 0x00, 0x03, 0x01, 0x69, 0x00, 0x40, 0x44, 0x00, 0xAF, 0x64, 0x00, 0xB4, 0x00, 0xA0,
    0x01, 0x01, 0x00, 0x03, 0xA0, 0x01, 0x01, 0x00, 0x03, 0x40, 0x44, 0x00, 0xC7, 0x57, 0x00, 0xCC,
    0x64, 0x00, 0xD1, 0x77, 0x00, 0xD6, 0x00, 0xA0, 0x01, 0x01, 0x00, 0x03, 0xA0, 0x01, 0x01, 0x00,
    0x03, 0xA0, 0x01, 0x01, 0x00, 0x03, 0xA0, 0x01, 0x01, 0x00, 0x03, 0x01, 0x72, 0x00, 0x40, 0x75,
    0x00, 0xE6, 0x79, 0x00, 0xFB, 0x00, 0x01, 0x6F, 0x00, 0x40, 0x59, 0x00, 0xF1, 0x79, 0x00, 0xF6,
    0x00, 0xA0, 0x02, 0x04, 0x00, 0x00, 0xA0, 0x02, 0x04, 0x00, 0x00, 0x01, 0x65, 0x68, 0x00, 0x40,
    0x54, 0x01, 0x07, 0x74, 0x01, 0x0C, 0x00, 0xA0, 0x02, 0x04, 0x00, 0x00, 0xA0, 0x02, 0x04, 0x00,
    0x00, 0x01, 0x6E, 0x00, 0x40, 0x61, 0x01, 0x1F, 0x64, 0x01, 0x31, 0x6F, 0x01, 0x46, 0x00, 0x40,
    0x43, 0x01, 0x27, 0x63, 0x01, 0x2C, 0x00, 0xA0, 0x01, 0x03, 0x00, 0x04, 0xA0, 0x01, 0x03, 0x00,
    0x04, 0x01, 0x69, 0x00, 0x40, 0x44, 0x01, 0x3C, 0x64, 0x01, 0x41, 0x00, 0xA0, 0x01, 0x03, 0x00,
    0x04, 0xA0, 0x01, 0x03, 0x00, 0x04, 0x40, 0x44, 0x01, 0x54, 0x57, 0x01, 0x59, 0x64, 0x01, 0x5E,
    0x77, 0x01, 0x63, 0x00, 0xA0, 0x01, 0x03, 0x00, 0x04, 0xA0, 0x01, 0x03, 0x00, 0x04, 0xA0, 0x01,
    0x03, 0x00, 0x04, 0xA0, 0x01, 0x03, 0x00, 0x04, 0xC1, 0x01, 0x73, 0x42, 0x01, 0x00, 0x1A, 0x01,
    0x71, 0x00, 0xA0, 0x40, 0x02, 0x00, 0x19, 0xC1, 0x01, 0x82, 0x42, 0x01, 0x00, 0x02, 0x01, 0x71,
    0x00, 0xE0, 0xC0, 0x02, 0x00, 0x0A, 0x01, 0x71, 0x00, 0xA0, 0x41, 0x03, 0x00, 0x0A, 0x01, 0x7A,
    0x00, 0xA0, 0x40, 0x02, 0x00, 0x0F, 0xC1, 0x01, 0xA1, 0x42, 0x01, 0x00, 0x0F, 0x01, 0x71, 0x00,
    0xA0, 0x40, 0x02, 0x00, 0x1B, 0x01, 0x7A, 0x00, 0xE0, 0xC0, 0x02, 0x00, 0x11, 0x01, 0x7A, 0x00,
    0xA0, 0x40, 0x01, 0x00, 0x12, 0x01, 0x7A, 0x00, 0xA0, 0x40, 0x02, 0x00, 0x13, 0x01, 0x7A, 0x00,
    0xA0, 0x40, 0x02, 0x00, 0x15, 0xC1, 0x01, 0xD0, 0x42, 0x01, 0x00, 0x1E, 0x01, 0x71, 0x00, 0xA0,
    0x40, 0x02, 0x00, 0x1D, 0x01, 0x7A, 0x00, 0xE0, 0xC1, 0x02, 0x00, 0x17, 0x01, 0x7A, 0x00, 0xA0,
    0x41, 0x01, 0x00, 0x18, 0x01, 0x7A, 0x00, 0xA0, 0x41, 0x02, 0x00, 0x1F, 0x01, 0x75, 0x71, 0x00,
    0xA0, 0x40, 0x00, 0x00, 0x00, 0x01, 0x78, 0x00, 0x40, 0x61, 0x02, 0x09, 0x65, 0x02, 0x0E, 0x69,
    0x02, 0x13, 0x6F, 0x02, 0x18, 0x75, 0x02, 0x1D, 0x00, 0xA0, 0x40, 0x01, 0x00, 0x18, 0xA0, 0x40,
    0x01, 0x00, 0x18, 0xA0, 0x40, 0x01, 0x00, 0x18, 0xA0, 0x40, 0x01, 0x00, 0x18, 0xA0, 0x40, 0x01,
    0x00, 0x18, 0x01, 0x65, 0x78, 0x00, 0xA0, 0x42, 0x03, 0x00, 0x07, 0xC5, 0x02, 0x0F, 0x41, 0x01,
    0x00, 0x21, 0x02, 0x0A, 0x41, 0x01, 0x00, 0x21, 0x02, 0x14, 0x41, 0x01, 0x00, 0x21, 0x02, 0x1E,
    0x41, 0x01, 0x00, 0x21, 0x02, 0x19, 0x41, 0x01, 0x00, 0x21, 0x40, 0x66, 0x02, 0x58, 0x6D, 0x02,
    0x60, 0x70, 0x02, 0x65, 0x74, 0x02, 0x6A, 0x00, 0x01, 0x70, 0x00, 0xA0, 0x41, 0x02, 0x00, 0x0D,
    0xA0, 0x40, 0x01, 0x00, 0x09, 0xA0, 0x40, 0x01, 0x00, 0x17, 0xA0, 0x40, 0x01, 0x00, 0x09, 0xA0,
    0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00,
    0x00, 0x00, 0x00
};

static const uint8_t sequence_transform_completions_data[COMPLETIONS_SIZE] PROGMEM = {
    0x27, 0x72, 0x65, 0x20, 0x27, 0x74, 0x20, 0x6B, 0x65, 0x79, 0x75, 0x65, 0x65, 0x68, 0x79, 0x69,
    0x67, 0x69, 0x6C, 0x69, 0x6D, 0x69, 0x6E, 0x73, 0x70, 0x75, 0x61, 0x75, 0x69, 0x75, 0x6F, 0x79,
    0x74, 0x78
};
